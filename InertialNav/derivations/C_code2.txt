float nextPopt[2][2];
nextPopt[0][0] = Popt[0][0] + stateNoiseVar1;
nextPopt[0][1] = Popt[0][1];
nextPopt[1][0] = Popt[1][0];
nextPopt[1][1] = Popt[1][1] + stateNoiseVar1;
float nextPXopt[2][2];
nextPXopt[0][0] = - Popt[0][0]*(SH_OPT[0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[1]*(Popt[0][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[1][0]*fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4]*SK_OPT[1]*(Popt[0][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]);
nextPXopt[0][1] = - Popt[0][1]*(SH_OPT[0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[1]*(Popt[0][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[1][1]*fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4]*SK_OPT[1]*(Popt[0][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]);
nextPXopt[1][0] = - Popt[1][0]*(fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4]*SK_OPT[1]*(Popt[1][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[0][0]*SH_OPT[0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[1]*(Popt[1][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]);
nextPXopt[1][1] = - Popt[1][1]*(fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4]*SK_OPT[1]*(Popt[1][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[0][1]*SH_OPT[0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[1]*(Popt[1][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]);
float nextPYopt[2][2];
nextPYopt[0][0] = - Popt[0][0]*(SH_OPT[0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[0]*(Popt[0][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[1][0]*fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4]*SK_OPT[0]*(Popt[0][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]);
nextPYopt[0][1] = - Popt[0][1]*(SH_OPT[0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[0]*(Popt[0][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[1][1]*fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4]*SK_OPT[0]*(Popt[0][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]);
nextPYopt[1][0] = - Popt[1][0]*(fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4]*SK_OPT[0]*(Popt[1][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[0][0]*SH_OPT[0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[0]*(Popt[1][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]);
nextPYopt[1][1] = - Popt[1][1]*(fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4]*SK_OPT[0]*(Popt[1][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]) - 1) - Popt[0][1]*SH_OPT[0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[0]*(Popt[1][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]);
float nextPRopt[2][2];
nextPRopt[0][0] = Popt[0][0] - (Popt[0][1]*Popt[1][0]*SK_RNG[1]*SK_RNG[2])/(sq(q0) - sq(q1) - sq(q2) + sq(q3));
nextPRopt[0][1] = Popt[0][1] - (Popt[0][1]*Popt[1][1]*SK_RNG[1]*SK_RNG[2])/(sq(q0) - sq(q1) - sq(q2) + sq(q3));
nextPRopt[1][0] = -Popt[1][0]*((Popt[1][1]*SK_RNG[1]*SK_RNG[2])/(sq(q0) - sq(q1) - sq(q2) + sq(q3)) - 1);
nextPRopt[1][1] = -Popt[1][1]*((Popt[1][1]*SK_RNG[1]*SK_RNG[2])/(sq(q0) - sq(q1) - sq(q2) + sq(q3)) - 1);
float SH_OPT[6][1];
SH_OPT[0] = sq(q0) - sq(q1) - sq(q2) + sq(q3);
SH_OPT[1] = vel_x*(sq(q0) + sq(q1) - sq(q2) - sq(q3)) + vel_y*(2*q0*q3 + 2*q1*q2) - vel_z*(2*q0*q2 - 2*q1*q3);
SH_OPT[2] = vel_y*(sq(q0) - sq(q1) + sq(q2) - sq(q3)) - vel_x*(2*q0*q3 - 2*q1*q2) + vel_z*(2*q0*q1 + 2*q2*q3);
SH_OPT[3] = pd - ptd;
SH_OPT[4] = 1/sq(SH_OPT[3]);
SH_OPT[5] = 1/SH_OPT[3];
float H_OPT[2][2];
H_OPT[0][0] = -SH_OPT[0]*SH_OPT[2]*SH_OPT[5];
H_OPT[0][1] = -fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4];
H_OPT[1][0] = SH_OPT[0]*SH_OPT[1]*SH_OPT[5];
H_OPT[1][1] = fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4];
float SK_OPT[3][1];
SK_OPT[0] = 1/(R_OPT + SH_OPT[0]*SH_OPT[1]*SH_OPT[5]*(Popt[0][0]*SH_OPT[0]*SH_OPT[1]*SH_OPT[5] + Popt[1][0]*fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4]) + fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4]*(Popt[0][1]*SH_OPT[0]*SH_OPT[1]*SH_OPT[5] + Popt[1][1]*fScale*SH_OPT[0]*SH_OPT[1]*SH_OPT[4]));
SK_OPT[1] = 1/(R_OPT + SH_OPT[0]*SH_OPT[2]*SH_OPT[5]*(Popt[0][0]*SH_OPT[0]*SH_OPT[2]*SH_OPT[5] + Popt[1][0]*fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4]) + fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4]*(Popt[0][1]*SH_OPT[0]*SH_OPT[2]*SH_OPT[5] + Popt[1][1]*fScale*SH_OPT[0]*SH_OPT[2]*SH_OPT[4]));
SK_OPT[2] = SH_OPT[0];
float K_OPT[2][2];
K_OPT[0][0] = -SK_OPT[1]*(Popt[0][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]);
K_OPT[0][1] = SK_OPT[0]*(Popt[0][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[0][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]);
K_OPT[1][0] = -SK_OPT[1]*(Popt[1][0]*SH_OPT[2]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[2]*SH_OPT[4]*SK_OPT[2]);
K_OPT[1][1] = SK_OPT[0]*(Popt[1][0]*SH_OPT[1]*SH_OPT[5]*SK_OPT[2] + Popt[1][1]*fScale*SH_OPT[1]*SH_OPT[4]*SK_OPT[2]);
float H_RNG[1][2];
H_RNG[0][1] = 1/(sq(q0) - sq(q1) - sq(q2) + sq(q3));
float SK_RNG[3][1];
SK_RNG[0] = sq(q0) - sq(q1) - sq(q2) + sq(q3);
SK_RNG[1] = 1/(R_RNG + Popt[1][1]/sq(SK_RNG[0]));
SK_RNG[2] = 1/SK_RNG[0];
float K_RNG[2][1];
float K_RNG[1][1];
K_RNG[0] = Popt[0][1]*SK_RNG[1]*SK_RNG[2];
K_RNG[1] = Popt[1][1]*SK_RNG[1]*SK_RNG[2];
