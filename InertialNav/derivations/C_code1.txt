float nextPopt[1][1];
nextPopt[0][0] = Popt + stateNoiseVar;
float SH_OPT[4][1];
SH_OPT[0] = sq(q0) - sq(q1) - sq(q2) + sq(q3);
SH_OPT[1] = 1/sq(pd - ptd);
SH_OPT[2] = sq(q1);
SH_OPT[3] = 2*q0*q3;
float H_OPT[2][1];
H_OPT[0][0] = SH_OPT[0]*SH_OPT[1]*(vel_y*(SH_OPT[2] - sq(q0) - sq(q2) + sq(q3)) - vel_z*(2*q0*q1 + 2*q2*q3) + vel_x*(SH_OPT[3] - 2*q1*q2));
H_OPT[1][0] = SH_OPT[0]*SH_OPT[1]*(vel_x*(SH_OPT[2] + sq(q0) - sq(q2) - sq(q3)) - vel_z*(2*q0*q2 - 2*q1*q3) + vel_y*(SH_OPT[3] + 2*q1*q2));
float SK_OPT[4][1];
SK_OPT[0] = vel_x*(SH_OPT[2] + sq(q0) - sq(q2) - sq(q3)) - vel_z*(2*q0*q2 - 2*q1*q3) + vel_y*(SH_OPT[3] + 2*q1*q2);
SK_OPT[1] = vel_y*(SH_OPT[2] - sq(q0) - sq(q2) + sq(q3)) - vel_z*(2*q0*q1 + 2*q2*q3) + vel_x*(SH_OPT[3] - 2*q1*q2);
SK_OPT[2] = sq(SH_OPT[1]);
SK_OPT[3] = sq(SH_OPT[0]);
float K_OPT[1][2];
K_OPT[0][0] = (Popt*SH_OPT[0]*SH_OPT[1]*SK_OPT[1])/(R_OPT + Popt*sq(SK_OPT[1])*SK_OPT[2]*SK_OPT[3]);
K_OPT[0][1] = (Popt*SH_OPT[0]*SH_OPT[1]*SK_OPT[0])/(R_OPT + Popt*sq(SK_OPT[0])*SK_OPT[2]*SK_OPT[3]);
float nextPopt[1][1];
nextPopt[0][0] = Popt - (sq(Popt)*sq(SH_OPT[0])*SH_OPT[1]sq()*SK_OPT[1]*(vel_y*(SH_OPT[2] - q0sq() - q2sq() + q3sq()) - vel_z*(2*q0*q1 + 2*q2*q3) + vel_x*(SH_OPT[3] - 2*q1*q2)))/(R_OPT + Popt*SK_OPT[1]sq()*SK_OPT[2]*SK_OPT[3]);
float nextPopt[1][1];
nextPopt[0][0] = Popt - (sq(Popt)*sq(SH_OPT[0])*SH_OPT[1]sq()*SK_OPT[0]*(vel_x*(SH_OPT[2] + q0sq() - q2sq() - q3sq()) - vel_z*(2*q0*q2 - 2*q1*q3) + vel_y*(SH_OPT[3] + 2*q1*q2)))/(R_OPT + Popt*SK_OPT[0]sq()*SK_OPT[2]*SK_OPT[3]);
float H_RNG[1][1];
H_RNG[0][0] = 1/(sq(q0) - sq(q1) - sq(q2) + sq(q3));
float SK_RNG[1][1];
SK_RNG[0] = sq(q0) - sq(q1) - sq(q2) + sq(q3);
float K_RNG[1][1];
float K_RNG[1][1];
K_RNG[0] = Popt/(SK_RNG[0]*(R_RNG + Popt/sq(SK_RNG[0])));
float nextPopt[1][1];
nextPopt[0][0] = Popt - sq(Popt)/(SK_RNG[0]*(R_RNG + Popt/sq(SK_RNG[0]))*(sq(q0) - sq(q1) - sq(q2) + sq(q3)));
