float F[3][3];
F[0][0] = 1;
F[1][0] = dt;
F[1][1] = 1;
F[2][2] = 1;
float SPP[1][1];
SPP[0] = P[1][0] + P[0][0]*dt;
float nextP[3][3];
nextP[0][0] = P[0][0] + R_AD*sq(dt);
nextP[0][1] = P[0][1] + P[0][0]*dt;
nextP[1][1] = P[1][1] + P[0][1]*dt + dt*SPP[0];
nextP[0][2] = P[0][2];
nextP[1][2] = P[1][2] + P[0][2]*dt;
nextP[2][2] = P[2][2] + R_TPD;
float H_HAGL[1][3];
H_HAGL[0][1] = -1;
H_HAGL[0][2] = 1;
float SK_HAGL[1][1];
SK_HAGL[0] = 1/(P[1][1] - P[1][2] - P[2][1] + P[2][2] + R_HAGL);
float Kfusion[3][1];
float Kfusion[1][1];
Kfusion[0] = -SK_HAGL[0]*(P[0][1] - P[0][2]);
Kfusion[1] = -SK_HAGL[0]*(P[1][1] - P[1][2]);
Kfusion[2] = -SK_HAGL[0]*(P[2][1] - P[2][2]);
float H_PD[1][3];
H_PD[0][1] = 1;
float SK_PD[1][1];
SK_PD[0] = 1/(P[1][1] + R_PD);
float Kfusion[3][1];
float Kfusion[1][1];
Kfusion[0] = P[0][1]*SK_PD[0];
Kfusion[1] = P[1][1]*SK_PD[0];
Kfusion[2] = P[2][1]*SK_PD[0];
